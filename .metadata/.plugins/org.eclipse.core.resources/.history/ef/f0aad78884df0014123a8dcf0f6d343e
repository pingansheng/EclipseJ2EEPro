/**
 * 调查结果分析js
 */
$(document)
		.ready(
				function() {
					// 为模块加载器配置echarts的路径，从当前页面链接到echarts.js，定义所需图表路径
					require.config({
						paths : {
							echarts : './js/echarts/echarts' // echarts.js的路径
						}
					});

					/*状态参数*/
					var globalstatus=false;
					/* 图表参数数据定义 */
					var ajaxData = null;
					var titleText = "题目名称";
					var legendData = [ "选项1", "选项2", "选项3", "选项4", "选项5" ];
					var seriesData = null;
					var chartOption = null;
					var barLegend = null;
					var qsmCount = null;
					/* 柱状图Option */
					var setOption = function(chartType) {
						// 柱状图
						if (chartType == 1) {
							chartOption = {
								title : {
									text : titleText,
								},
								tooltip : {
									trigger : 'axis',
								},
								legend : {
									data : barLegend
								},
								toolbox : {
									show : true,
									feature : {
										mark : {
											show : true
										},
										magicType : {
											show : true,
											type : [ 'line', 'bar', 'stack',
													'tiled' ]
										},
										saveAsImage : {
											show : true
										}
									}
								},
								calculable : true,
								xAxis : [ {
									type : 'value',
									boundaryGap : [ 0, 0.01 ]
								} ],
								yAxis : [ {
									type : 'category',
									data : legendData
								} ],
								series : seriesData
							};
						}
						// 饼图
						if (chartType == 0) {
							chartOption = {
								title : {
									text : titleText,
									x : 'center'
								},
								tooltip : {
									trigger : 'item',
									formatter : "{b} : {c} ({d}%)"
								},
								legend : {
									orient : 'vertical',
									x : 'left',
									data : legendData
								},
								toolbox : {
									show : true,
									feature : {
										saveAsImage : {
											show : true
										}
									}
								},
								calculable : false,
								series : seriesData
							};
						}
					};

					/* 渲染ECharts图表 */
					function DrawEChart(ec) {
						// 图表渲染的容器对象
						var chartContainer = document.getElementById("main");
						// 加载图表
						var myChart = ec.init(chartContainer);
						myChart.setOption(chartOption);
					}

					/* 绘图函数 */
					var draw = function() {
						// Step:4 动态加载echarts然后在回调函数中开始使用，注意保持按需加载结构定义图表路径
						require([ 'echarts', 'echarts/chart/bar',
								'echarts/chart/pie' ],
						// 回调函数
						DrawEChart);
					};

					/**
					 * Ajax请求获取动态数据
					 */
					var getAnaData = function(formid) {
						$.ajax({
							cache : true,
							type : "POST",
							url : "SurveyAction_doAnalyze",
							data : $("#" + formid).serialize(),
							async : false,
							error : function(request) {
								alert("请求错误，请重试");
								return false;
							},
							success : function(data) {
								var status = data.status;
								if (status != null && status == "ok") {
									// 成功
									ajaxData = data;
									titleText = data.title;
									legendData = data.legendData;
									seriesData = data.series;
									barLegend = data.legend;
									qsmCount = data.qsmCount;
									status
								} else {
									var info = data.info;
									if (null != info) {
										alert(info);
										return false;
									} else {
										alert("请求数据出错，请重试");
									}
								}
							}
						});

					};

					/**
					 * 矩阵统计比例数据调整
					 */
					var MatrixDataAjust = function(chartType) {
						if (chartType == 0) {
							titleText += "(选择数量)";
						} else {
							titleText += "(百分比)";
							// 调整百分比数据
							for (var sIndex = 0; sIndex < seriesData.length; sIndex++) {
								var data = seriesData[sIndex].data;
								for (var dIndex = 0; dIndex < data.length; dIndex++) {
									data[dIndex].value = data[dIndex].value
											/ qsmCount * 100;
								}
							}
						}
					};

					/*
					 * 得到json对象中的值
					 */
					var getObjfromJson = function(key, json) {
						for ( var jsonKey in json) {
							if (jsonKey == key) {
								return json[jsonKey];
							}
						}
					};

					/**
					 * 下拉选项矩阵统计设置
					 */
					var SelectMatrixAjust = function() {
						var rowCount = ajaxData.matrixRowCount;
						var colCount = ajaxData.matrixColCount;
						// 设置宽高
						if (rowCount > 4) {
							$("#main").height(120 * rowCount);
						}
						if (colCount > 6) {
							$("#main").width(130 * colCount);
						}
						var tdWidth = $("#main").width() / colCount;
						var tdHeight = $("#main").height() / rowCount;

						// 拼装数据
						var $table = $("<table></table>");

						for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
							var $tr = $("<tr></tr>");
							for (var colIndex = 0; colIndex < colCount; colIndex++) {
								var $td = $("<td></td>");
								var $divContainer = $("<div></div");
								$divContainer.width(tdWidth);
								$divContainer.height(tdHeight);
								$divContainer.attr("id", rowIndex + "_"
										+ colIndex);
								$divContainer.text("test");
								$divContainer.appendTo($td);
								$td.appendTo($tr);
							}
							$tr.appendTo($table);
						}
						$("#main").append($table);
						for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
							for (var colIndex = 0; colIndex < colCount; colIndex++) {
								var title=
									getObjfromJson(rowIndex + "_"+ colIndex+"_row", ajaxData.matrixLabel)
									+":"+getObjfromJson(rowIndex + "_"+ colIndex+"_col", ajaxData.matrixLabel);
								drawMatrixTableChart(title,rowIndex + "_" + colIndex);
							}
						}

					};

					var drawMatrixTableChart = function(title,srcid) {
						// Step:4
						// 动态加载echarts然后在回调函数中开始使用，注意保持按需加载结构定义图表路径
						require([ 'echarts', 'echarts/chart/pie' ],
						// 回调函数
						drawMatrixChart);

						function drawMatrixChart(ec) {
							var seriesData = getObjfromJson(srcid,
									ajaxData.matrixSelSeriesList);
							// 图表渲染的容器对象
							var chartContainer = document.getElementById(srcid);
							// 加载图表
							var myChart = ec.init(chartContainer);
							myChart.setOption({
								title : {
									text : title,
									x : 'center'
								},
								tooltip : {
									trigger : 'item',
									formatter : "选项{b} : 选择次数{c}<br>(百分比{d}%)"
								},
								legend : {
									orient : 'vertical',
									x : 'left',
									data : legendData
								},
								calculable : false,
								series : [ {
									radius : '50%',
									data : seriesData,
									type : 'pie',
									itemStyle : {
										normal : {
											label : {
												show : false
											},
											labelLine : {
												show : false
											}
										},
										emphasis : {
											label : {
												show : true,
												position : 'outer'
											},
											labelLine : {
												show : true,
												lineStyle : {
													color : 'green'
												}
											}
										}
									}
								} ]
							});
						}
						;
					};

					/*
					 * 弹出层
					 */
					var blockPage = function(width, height, srcId) {
						$.blockUI({
							message : $('#' + srcId),
							css : {
								top : '50%',
								left : '50%',
								textAlign : 'left',
								marginLeft : '-400px',
								marginTop : '-200px',
								width : width + 'px',
								height : height + 'px',
							}
						});
					};

					/* 阻断表单提交 */
					$("form[name='anaForm']").submit(
							function() {
								var questionType = event.target.qtype.value;
								var questionId = event.target.id;
								var status=getAnaData(questionId);
								var chartType = $(
										"#" + event.target.id + " select")
										.val();
								// 得到图表类型
								if (questionType < 6) {
									setOption(chartType);
									draw();
								} else {
									if (questionType != 8) {
										// 矩阵式
										MatrixDataAjust(chartType);
										setOption(1);
										draw();
									} else {
										SelectMatrixAjust();
									}
								}
								blockPage(800, 400, "main");
								$('.blockOverlay').attr('title', '单击关闭').click(
										$.unblockUI);
								return false;
							});
					/* end阻断表单提交 */
				});